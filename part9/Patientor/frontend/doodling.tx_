export type State = {
  patients: { [id: string]: Patient };
};

State = {
  patients: {
    d27736ec-f723-11e9-8f0b-362b9e155667: {id: 'd27736ec-f723-11e9-8f0b-362b9e155667', name: 'Hans Gruber', dateOfBirth: '1970-04-25', gender: 'male', occupation: 'Technician'},
    d2773336-f723-11e9-8f0b-362b9e155667: {id: 'd2773336-f723-11e9-8f0b-362b9e155667', name: 'John McClane', dateOfBirth: '1986-07-09', gender: 'male', occupation: 'New york city cop'},
    d2773598-f723-11e9-8f0b-362b9e155667: {id: 'd2773598-f723-11e9-8f0b-362b9e155667', name: 'Martin Riggs', dateOfBirth: '1979-01-30', gender: 'male', occupation: 'Cop'},
    d2773822-f723-11e9-8f0b-362b9e155667: {id: 'd2773822-f723-11e9-8f0b-362b9e155667', name: 'Dana Scully', dateOfBirth: '1974-01-05', gender: 'female', occupation: 'Forensic Pathologist'},
  };
}

return {
  ...state,
  patients: {
    ...action.payload.reduce((memo, patient) => (
      { ...memo, [patient.id]: patient }
      ),
      {}
    ),
    ...state.patients
  }
};

export const StateProvider = ({ reducer, children }) => {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    <StateContext.Provider value={[state, dispatch]}>
      {children}
    </StateContext.Provider>
  );
};
